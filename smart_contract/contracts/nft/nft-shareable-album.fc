#include "../imports/stdlib.fc";
#include "./params.fc";
#include "./op-codes.fc";

;; NFT Shareable Album Contract

;; Storage
;; owner_address: MsgAddress
;; viewing_fee: Coins
;; shared_nfts: dict<uint256, MsgAddress> 
;; royalty_params: ^Cell

(slice, int, cell, cell) load_shareable_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; owner_address
        ds~load_coins(),    ;; viewing_fee
        ds~load_dict(),     ;; shared_nfts
        ds~load_ref()       ;; royalty_params
    );
}

() save_shareable_data(slice owner_address, int viewing_fee, cell shared_nfts, cell royalty_params) impure inline {
    set_data(begin_cell()
        .store_slice(owner_address)
        .store_coins(viewing_fee)
        .store_dict(shared_nfts)
        .store_ref(royalty_params)
        .end_cell());
}

() process_view_payment(slice viewer_address, int msg_value, slice owner_address, int viewing_fee, cell royalty_params) impure {
    throw_unless(402, msg_value >= viewing_fee);
    
    ;; Calculate royalty
    slice rs = royalty_params.begin_parse();
    int royalty_factor = rs~load_uint(16);
    int royalty_base = rs~load_uint(16);
    slice royalty_address = rs~load_msg_addr();
    
    int royalty = muldiv(viewing_fee, royalty_factor, royalty_base);
    int owner_share = viewing_fee - royalty;
    
    ;; Send royalty
    var royalty_msg = begin_cell()
        .store_uint(0x10, 6) 
        .store_slice(royalty_address)
        .store_coins(royalty)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
    send_raw_message(royalty_msg.end_cell(), 1);
    
    ;; Send owner share
    var owner_msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(owner_address)
        .store_coins(owner_share)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
    send_raw_message(owner_msg.end_cell(), 1);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { 
        ;; Process view payment
        var (owner_address, viewing_fee, shared_nfts, royalty_params) = load_shareable_data();
        slice sender_address = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();
        process_view_payment(sender_address, msg_value, owner_address, viewing_fee, royalty_params);
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { return (); }
    
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    
    var (owner_address, viewing_fee, shared_nfts, royalty_params) = load_shareable_data();
    
    if (op == op::share_nft()) {
        throw_unless(401, equal_slices_bits(sender_address, owner_address));
        int nft_index = in_msg_body~load_uint(256);
        slice nft_address = in_msg_body~load_msg_addr();
        shared_nfts~udict_set(256, nft_index, nft_address);
        save_shareable_data(owner_address, viewing_fee, shared_nfts, royalty_params);
        return ();
    }
}

;; Get methods
(slice, int, cell) get_shareable_data() method_id {
    var (owner_address, viewing_fee, shared_nfts, _) = load_shareable_data();
    return (owner_address, viewing_fee, shared_nfts);
}
