#include "../imports/stdlib.fc";
#include "./params.fc";
#include "./op-codes.fc";

const int royalty_factor = 5;
const int royalty_base = 100;
const royalty_address = "UQD8lYoIeKSAJkTTkjaHn-fR0DTymXGH03-NWdtw4sWMUexD"a;

;; NFTCollectionCreator smart contract
;; Allows users to deploy NFT collections with custom royalty settings

(slice) load_data() inline {
    var ds = get_data().begin_parse();
    return (ds~load_msg_addr()); ;; owner_address
}

() save_data(slice owner_address) impure inline {
    set_data(begin_cell()
        .store_slice(owner_address)
        .end_cell());
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { 
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::make_collection) { ;; create collection
        cell collection_code = in_msg_body~load_ref();
        cell content = in_msg_body~load_ref();
        cell nft_item_code = in_msg_body~load_ref();
        
        ;; Load royalty params
        ;; int royalty_factor = in_msg_body~load_uint(16);
        ;; int royalty_base = in_msg_body~load_uint(16);
        ;; slice royalty_address = in_msg_body~load_msg_addr();
        
        cell royalty_params = begin_cell()
            .store_uint(royalty_factor, 16)
            .store_uint(royalty_base, 16)
            .store_slice(royalty_address)
            .end_cell();

        cell state_init = begin_cell()
            .store_uint(0, 2)
            .store_dict(collection_code)
            .store_dict(
                begin_cell()
                    .store_slice(sender_address)
                    .store_uint(0, 64)
                    .store_ref(content)
                    .store_ref(nft_item_code)
                    .store_ref(royalty_params)
                    .end_cell()
            )
            .store_uint(0, 1)
            .end_cell();

        slice collection_address = begin_cell()
            .store_uint(4, 3)
            .store_int(workchain(), 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(collection_address)
            .store_coins(0)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init);
            
        send_raw_message(msg.end_cell(), 64);
        return ();
    }

    throw(0xffff);
}
