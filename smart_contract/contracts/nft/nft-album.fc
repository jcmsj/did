#include "../imports/stdlib.fc";
#include "./params.fc";
#include "./op-codes.fc";

;; NFT Album Contract

;; Storage
;; owner_address: MsgAddress
;; nfts: dict<uint256, MsgAddress> ;; maps NFT index to NFT address

(slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; owner_address
        ds~load_dict()  ;; nfts dictionary
    );
}

() save_data(slice owner_address, cell nfts) impure inline {
    set_data(begin_cell()
        .store_slice(owner_address)
        .store_dict(nfts)
        .end_cell());
}

;; Add NFT to album
() add_nft(slice nft_address, int nft_index, cell nfts) impure {
    nfts~udict_set(256, nft_index, nft_address);
}

;; Remove NFT from album  
() remove_nft(int nft_index, cell nfts) impure {
    nfts~udict_delete?(256, nft_index);
}

;; Rest of imports and storage definitions remain same...

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { 
        ;; Process view payment
        var (owner_address, viewing_fee, shared_nfts, royalty_params) = load_shareable_data();
        slice sender_address = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();
        process_view_payment(sender_address, msg_value, owner_address, viewing_fee, royalty_params);
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { return (); }
    
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    
    var (owner_address, viewing_fee, shared_nfts, royalty_params) = load_shareable_data();
    
    if (op == op::share_nft()) {
        throw_unless(401, equal_slices_bits(sender_address, owner_address));
        int nft_index = in_msg_body~load_uint(256);
        slice nft_address = in_msg_body~load_msg_addr();
        shared_nfts~udict_set(256, nft_index, nft_address);
        save_shareable_data(owner_address, viewing_fee, shared_nfts, royalty_params);
        return ();
    }
}

;; Get methods
(slice, cell) get_album_data() method_id {
    return load_data();
}

;; get album data given an owner address
(slice, cell) get_album_data_by_owner(slice owner_address) method_id {
    var (album_owner_address, nfts) = load_data();
    throw_unless(401, equal_slices_bits(owner_address, album_owner_address));
    return (album_owner_address, nfts);
}
