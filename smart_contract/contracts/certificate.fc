#include "imports/stdlib.fc";

const op::edit = "op::edit"c ;;

;; storage variables
global int ctx_id;
global slice ctx_name;  ;; changed from int to slice
global slice ctx_owner;  ;; added owner
global int ctx_counter;
;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_id = ds~load_uint(32);
    ctx_name = ds~load_ref().begin_parse();  ;; load string as a cell ref and convert to slice
    ctx_owner = ds~load_ref().begin_parse();  ;; load string as a cell ref and convert to slice
    ctx_counter = ds~load_uint(32);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_id, 32)
            .store_ref(begin_cell().store_slice(ctx_name).end_cell())  ;; store string as a cell ref
            .store_ref(begin_cell().store_slice(ctx_owner).end_cell())  ;; store string as a cell ref
            .store_uint(ctx_counter, 32)
            .end_cell()
    );
}

;; recv_internal is the main function of the contract
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::edit) {  ;; changed operation to edit
        ctx_name = in_msg_body~load_ref().begin_parse();  ;; load new name from message
        ctx_owner = in_msg_body~load_ref().begin_parse();  ;; load new owner from message
        save_data();
        return ();
    }

    throw(0xffff);
}

;; get methods
slice get_name() method_id {  ;; changed from get_counter to get_name
    load_data();
    return ctx_name;
}

int get_id() method_id {
    load_data();
    return ctx_id;
}

slice get_owner() method_id {  ;; added get_owner
    load_data();
    return ctx_owner;
}
